package users;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import users.User;
import users.UserRepository;

import java.util.*;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after users.Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email,@RequestParam String phone, @RequestParam String password) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        n.setPhone(phone);
        n.setPassword(password);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/user")
    public @ResponseBody Iterable<User> getUser(@RequestParam String name) {
        // This returns a JSON or XML with the users
        List<User> users = userRepository.findByName(name);
        return users;
    }
    @GetMapping(path="/email")
    public @ResponseBody Iterable<User> getEmailUser(@RequestParam String name) {
        // This returns a JSON or XML with the users
        List<User> users = userRepository.findByName(name);
        ArrayList<String> emeils = new ArrayList<>(users.size());
        for (int i = 0; i < users.size(); i++) {
            emeils.add(users.get(i).getEmail());
        }

        return (List)emeils;
    }
    @GetMapping(path="/passforemail")
    public @ResponseBody Iterable<User> getPasswordUser(@RequestParam String email) {
        // This returns a JSON or XML with the users
        List<User> users = userRepository.findByEmail(email);
        ArrayList<String> passwords = new ArrayList<>(users.size());
        for (int i = 0; i < users.size(); i++) {
            passwords.add(users.get(i).getPassword());
        }

        return (List)passwords;
    }
    @GetMapping(path="/passforphone")
    public @ResponseBody Iterable<User> getPasswordUserPhone (@RequestParam String phone) {
        // This returns a JSON or XML with the users
        List<User> users = userRepository.findByPhone(phone);
        ArrayList<String> passwords = new ArrayList<>(users.size());
        for (int i = 0; i < users.size(); i++) {
            passwords.add(users.get(i).getPassword());
        }

        return (List)passwords;
    }


}
